#Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.



class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sortedArrayToBST(nums):
    if not nums:
        return None

    mid = len(nums) // 2

    
    root = TreeNode(nums[mid])

    
    root.left = sortedArrayToBST(nums[:mid])
    root.right = sortedArrayToBST(nums[mid + 1:])

    return root

def inorderTraversal(root):
    result = []
    if root:
        result.extend(inorderTraversal(root.left))
        result.append(root.val)
        result.extend(inorderTraversal(root.right))
    return result

# Example 1:
nums1 = [-10, -3, 0, 5, 9]
result_tree1 = sortedArrayToBST(nums1)
result_list1 = inorderTraversal(result_tree1)
print(result_list1)

# Example 2:
nums2 = [1, 3]
result_tree2 = sortedArrayToBST(nums2)
result_list2 = inorderTraversal(result_tree2)
print(result_list2)


